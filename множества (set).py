# множества(sets) - изменяемый и встроенный тип данных в Python 3

# чем- то похож на списки, но обладает важной особенностью:
#   все данные в в множествах - уникальные, что убирает возможость обращаться к данным по индексу и срезам
# обычно множества (sets) используют по 2 причинам:
#   1) если набор данных должен быть уникален и не должен включать в себя повторения
#   2) множества работают быстрее,чем списки,массивы и кортежи
#              это значит,что их лучше использовать,если вам не нужно будет никак проебразовывать и изменять ваши данные
# если мы используем множество, то данные мы записываем в фигурные скобки {}   /// не путать с типом dict
my_set = {4, 'my_name_is_Nikolay', 535, 228.5}
print(type(my_set))
# если же нам нужно создать пустое множество,то мы пишем:
set()
# доказательство,что множество использует только уникальные данные:
unique_set = {1, 2, 5, 6, 2, 8, 8, 9, 1}
print(unique_set)   # те данные,которые повторяются - автоматически убираются из множества!
# методы для множеств:
# 1) метод add - добавляет элемент в множество(set)
unique_set.add('новая переменная')
print(unique_set)
# 2) обратным методом remove можно убрать,удалить элемент из множества(set)
unique_set.remove(1)
print(unique_set)
# проверка наличия элемента в множестве
if 25 in unique_set:
    print('Верно!')
else:
    unique_set.add(25)
    print(unique_set)


# ***    ну и самое сложное:
#   если у нас несколько множеств,то мы можем проверить,есть ли элементы,которые имеются в обоих множествах
#   сделать это можно с помощью метода intersection()
set_1 = {1, 34, 55, 2, 88.7}
set_2 = {55, 2, 12, 778.5, 55}
x = set_1.intersection(set_2)
print(x)

# также мы можем объеденить несколько множеств в одно с помощью метода union
set_3 = set_1.union(set_2)
print(set_3)
# метод difference - покажет различие в элементах из нескольких множеств
# /// покажет каких элементов из первого множества нету во втором!
difference_of_elements = set_1.difference(set_2)
print(difference_of_elements)
